;; copyright (c) 2015 Sean Corfield

(ns engine.committable
  "Committable protocol for output data sources.
  Also commit! implementation for update! or insert!
  selection, based on primary key in the row."
  (:require [engine.input :as i]))

(defprotocol Committable
  "An output data source is committable. You can insert! and update!
  and it knows how to get the primary key for any given table."
  (insert! [this table row])
  (update! [this table row pk v])
  (primary-key [this table]))

(defn lookup-keys
  "For any row fields that are keywords, look up their value
  in the environment. This allows updates to refer to keys
  generated by earlier updates in the list."
  [row env]
  (reduce-kv (fn [row k v] (assoc row k (if (keyword? v) (v env) v)))
             {} row))

(defn commit!
  "Commit all of the given updates to the supplied data sources.
  Applies the updates in order, building the key lookup environment
  as it goes, and replacing key references (columns with keyword values)."
  [data-sources updates]
  (reduce (fn [env [key dsn table row pk key-gen]]
            (let [ds (i/lookup-dsn data-sources dsn)
                  pk (or pk (primary-key ds table))
                  row (lookup-keys row env)]
              (if-let [pkv (get row pk)]
                (do
                  (update! ds table (dissoc row pk) pk pkv)
                  (cond-> env key (assoc key pkv)))
                (let [new-row (key-gen row)
                      new-pk (insert! ds table row)]
                  (cond-> env key (assoc key new-pk))))))
          {}
          updates))
